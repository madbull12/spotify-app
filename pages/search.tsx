import { useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import CategoryCard from "../components/CategoryCard";
import Search from "../components/Search";
import useDebounce from "../hooks/useDebounce";
import { IAlbum, ICategory, ISearchResult } from "../interface";
import spotifyApi from "../lib/spotifyApi";

const SearchPage = () => {
  const [search, setSearch] = useState<string>("");
  const [searchResult, setSearchResult] =
    useState<SpotifyApi.SearchResponse | null>(null);
  const [categories, setCategories] = useState<any>(null);
  const { data: session } = useSession();
  const accessToken: any = session?.accessToken;
  console.log(accessToken);
  const debouncedSearch = useDebounce(search, 500);

  useEffect(() => {
    if (!accessToken) return;
    spotifyApi.setAccessToken(accessToken);
  }, [accessToken]);

  useEffect(() => {
    if (!debouncedSearch) return setSearchResult(null);
    if (!accessToken) return;

    const fetchData = async () => {
      try {
        const res = await spotifyApi.search(
          debouncedSearch,
          ["track", "playlist", "album", "episode", "artist"],
          {
            limit: 20,
            offset: 1,
          }
        );
        setSearchResult(res.body);
      } catch (error) {
        console.log(error);
      }
    };

    if (debouncedSearch) fetchData();
  }, [debouncedSearch, accessToken]);

  console.log(searchResult);

  useEffect(() => {
    if (!accessToken) return;

    const fetchCategories = async () => {
      try {
        const res = await spotifyApi.getCategories({ limit: 40 });
        setCategories(res.body);
      } catch (error) {
        console.log(error);
      }
    };
    fetchCategories();
  }, []);
  return (
    <div>
      <Head>
        <title>Spotify</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Search search={search} setSearch={setSearch} />
      {debouncedSearch ? (
        <div className="flex gap-x-4 w-full mt-4">
          <div className="flex-[0.5]">
            <h1 className="text-white text-2xl font-bold mb-2">Top results</h1>
            {searchResult?.tracks?.items.slice(0, 1).map((track) => (
              <div className="p-4 bg-zinc-800 space-y-4">
                <Image
                  src={track.album.images[1].url}
                  height={100}
                  className="rounded-lg"
                  width={100}
                />
                <p className="text-2xl text-white ">{track.name}</p>
                <div className="flex items-center gap-x-4">
                    <p className="text-zinc-500 font-semibold">{track.artists[0].name}</p>
                    <span className="bg-black rounded-full text-white  font-bold uppercase px-2 text-sm">
                        {track.type}
                    </span>
                </div>
              </div>
            ))}
          </div>
          <div className="space-y-2">
            <h1 className="text-white text-2xl font-bold ">Tracks</h1>
            {/* {searchResult.slice(0, 7).map((track: ISearchResult) => (
              <Card key={uuidv4()} items={track} />
            ))} */}
          </div>
        </div>
      ) : (
        <div>
          <h1 className="font-bold text-2xl my-4 text-white">Browse all</h1>
          <div className="grid grid-cols-5 gap-4">
            {categories?.categories.items.map((category: ICategory) => (
              <CategoryCard category={category} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SearchPage;
